UNIT u_listas;

INTERFACE
 CONST
 m=300;

 TYPE
 T_DATO_lista = record
		cont:word;
		obra_social:string[15];
end;

 T_LISTA = RECORD
 	CAB,ACT: word;
 	ELEM : ARRAY [1..m] OF T_DATO_lista;
 	TAMANIO:word;
 end;

 PROCEDURE CREARLISTA(VAR L:T_LISTA);
 PROCEDURE AGREGAR (VAR L:T_LISTA; X:T_DATO_lista);
 FUNCTION LISTA_LLENA (VAR L:T_LISTA): BOOLEAN;
 FUNCTION LISTA_VACIA (VAR L:T_LISTA): BOOLEAN;
 PROCEDURE ELIMINARLISTA (VAR L:T_LISTA;BUSCADO: STRING; VAR X:T_DATO_lista);
 PROCEDURE SIGUIENTE(VAR L:T_LISTA);
 PROCEDURE PRIMERO (VAR L:T_LISTA);
 FUNCTION FIN (L:T_LISTA): BOOLEAN;
 FUNCTION TAMANIO (VAR L:T_LISTA): word;
 PROCEDURE RECUPERAR (VAR L:T_LISTA; VAR x:T_DATO_lista);
PROCEDURE BUSCAR (var L:T_LISTA; BUSCADO:STRING ;VAR ENC:BOOLEAN);
PROCEDURE DESPLAZAR_ATRAS(VAR L:T_LISTA; POSICION:word);
PROCEDURE DESPLAZAR_ADELANTE(VAR L:T_LISTA;POSICION:word);

IMPLEMENTATION
PROCEDURE CREARLISTA(VAR L:T_LISTA);
BEGIN
 L.CAB:=0;
 L.TAMANIO:=0;
END;

FUNCTION TAMANIO (VAR L:T_LISTA): word;
 BEGIN
 TAMANIO:= L.TAMANIO;
 END;

FUNCTION LISTA_LLENA (VAR L:T_LISTA): BOOLEAN;
 BEGIN
 LISTA_LLENA:= L.TAMANIO = m;
 END;

FUNCTION LISTA_VACIA (VAR L:T_LISTA): BOOLEAN;
 BEGIN
 LISTA_VACIA:= L.TAMANIO = 0;
 END;

PROCEDURE DESPLAZAR_ATRAS(VAR L:T_LISTA; POSICION:word);
 VAR
 I:BYTE;
 BEGIN
 FOR I:= TAMANIO(L) DOWNTO POSICION DO
 L.ELEM[I+1]:= L.ELEM[I] ;
 end;

PROCEDURE AGREGAR (VAR L:T_LISTA; X:T_DATO_lista);
BEGIN
IF (L.CAB= 0) THEN
 BEGIN
 INC(L.CAB);
 L.ELEM[L.CAB]:=X
 END
 ELSE
 IF (L.ELEM[L.CAB].obra_social > X.obra_social) THEN
 BEGIN
 DESPLAZAR_ATRAS(L, 1);
 L.CAB:=1;
 L.ELEM[L.CAB]:=X
 END
 ELSE
 BEGIN
 L.ACT:= L.CAB+1;
 WHILE (L.ACT <= TAMANIO(L)) AND (L.ELEM[L.ACT].obra_social < X.obra_social) DO
 BEGIN
 INC(L.ACT)
 END;
 IF L.ACT <=TAMANIO (L) THEN //l.act<= tamanio(l)
 DESPLAZAR_ATRAS(L,L.ACT);
 L.ELEM[L.ACT]:=X
 END;
INC(L.TAMANIO)
END;

PROCEDURE DESPLAZAR_ADELANTE(VAR L:T_LISTA;POSICION:word);
 VAR
 I:BYTE;
 BEGIN
 FOR I:=POSICION TO TAMANIO(L)-1 DO
 L.ELEM[I]:= L.ELEM[I+1];
 END;

 PROCEDURE ELIMINARLISTA (VAR L:T_LISTA;BUSCADO: STRING; VAR X:T_DATO_lista);
BEGIN
IF (L.ELEM[L.CAB].obra_social= BUSCADO) THEN
 BEGIN
 X:= L.ELEM[L.CAB];
 DESPLAZAR_ADELANTE(L,1) //si hay un solo elemento en la lista l.cab:=0
 END
 ELSE
 BEGIN
 L.ACT:= L.CAB+1;
 WHILE (L.ELEM[L.ACT].obra_social <> BUSCADO) DO
 BEGIN
 INC(L.ACT)
 END;
 X:= L.ELEM[L.ACT];
 DESPLAZAR_ADELANTE(L,L.ACT);
 END;
 DEC(L.TAMANIO);
 IF L.TAMANIO = 0 THEN L.CAB:= 0;
END;

PROCEDURE SIGUIENTE(VAR L:T_LISTA);
BEGIN
L.ACT:= L.ACT + 1;
END;

PROCEDURE PRIMERO (VAR L:T_LISTA);
BEGIN
L.ACT:= L.CAB;
END;

PROCEDURE RECUPERAR (VAR L:T_LISTA; VAR X:T_DATO_lista);
BEGIN
 X:= L.ELEM[L.ACT];
END;

FUNCTION FIN (L:T_LISTA): BOOLEAN;
BEGIN
FIN:= L.ACT = TAMANIO(L)+1;
END;

PROCEDURE BUSCAR (var L:T_LISTA; BUSCADO:STRING ;VAR ENC:BOOLEAN);
 VAR
X:T_DATO_lista;
BEGIN
 PRIMERO(L);
 ENC:= FALSE;
 WHILE NOT FIN(L) AND (NOT ENC) DO
 BEGIN
 RECUPERAR(L,X);
 IF X.obra_social = BUSCADO THEN ENC:=TRUE
 ELSE SIGUIENTE (L);
 END;
END;


END.
